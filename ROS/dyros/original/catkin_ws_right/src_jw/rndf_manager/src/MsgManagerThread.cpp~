#include "../inc/MsgManagerThread.h"
#include "../inc/WGS84_TM.h"
#include <QPointF>
#include <QDebug>
//void MsgManagerThread::SubTopicProcess(const MotionPlanner::LocalizationData::ConstPtr& msg)
//{
//    if(!m_bSubTopicUpdated)
//    {
//	m_bSubTopicUpdated = true;
//    }
//    
//}

MsgManagerThread::MsgManagerThread(int argc, char** argv, struct RNDF *pRNDF, struct MDF* pMDF)
    :m_bThreadStop(false),init_argc(argc), init_argv(argv), m_pRNDF(pRNDF), m_pMDF(pMDF)
{
    ros::init(init_argc, init_argv, "MsgManagerThread");
    ros::NodeHandle n;

    //possub = n.subscribe("LocalizationData", 10, &MsgManagerThread::SubTopicProcess, this);
    
    msgpub = n.advertise<nav_msgs::Path>("RNDFPathData", 100);
}

MsgManagerThread::~MsgManagerThread()
{
   
}

void MsgManagerThread::GraphGeneration()
{
	
}

void MsgManagerThread::stop()
{
    qDebug()<<"Thread::stop called from main thread:"<<currentThreadId();
    QMutexLocker locker(&m_mutex);
    m_bThreadStop = true;
}

nav_msgs::Path MsgManagerThread::SegmentPathMsg(int segNum)
{
	nav_msgs::Path msg;
    std::vector<geometry_msgs::PoseStamped> waypoints;
    msg.header.frame_id = "/map";
    msg.header.stamp = ros::Time::now(); 
	for(int i=0; i<m_pRNDF->number_of_segments; i++)
	{
		if( segNum != -1 )
		{
			i = segNum;	
		}
		for( int j=0; j<m_pRNDF->segments_list[i]->number_of_lanes; j++)
		{
			for( int k=0; k<m_pRNDF->segments_list[i]->lanes_list[j]->number_of_waypoints; k++)
			{
				geometry_msgs::PoseStamped waypt;
				waypt.header.frame_id = "/map";
				waypt.header.stamp = ros::Time::now();
				
				double tm_x, tm_y;
    
				tm_x = m_pRNDF->segments_list[i]->lanes_list[j]->waypoints_list[k]->longitude;
				tm_y = m_pRNDF->segments_list[i]->lanes_list[j]->waypoints_list[k]->latitude;
    				//_Bessel2TM(m_pRNDF->segments_list[i]->lanes_list[j]->waypoints_list[k]->longitude,m_pRNDF->segments_list[i]->lanes_list[j]->waypoints_list[k]->latitude,127.0452537,37.29485798, &tm_x, &tm_y);

				waypt.pose.position.x = tm_x;
				waypt.pose.position.y = tm_y;
				waypt.pose.position.z = 0;
				waypoints.push_back(waypt);
			}
		}
		if( segNum != -1 )
		{
			break;	
		}
	}

     msg.poses.resize(waypoints.size());
     	
     // Extract the plan in world coordinates, we assume the path is all in the same frame
     for(unsigned int i=0; i < waypoints.size(); i++)
     {
        msg.poses[i] = waypoints[i];
     }
    return msg;
}
void MsgManagerThread::PubAllSegMsg()
{
	msgpub.publish(SegmentPathMsg(-1));
}

void MsgManagerThread::PubSegMsg(int segNum)
{
 	msgpub.publish(SegmentPathMsg(segNum));
}

void MsgManagerThread::run()
{
	
    ros::Rate loop_rate(1000);
    while(1)
    {
        {
            QMutexLocker locker(&m_mutex);
            if(m_bThreadStop) break;
        }
        ros::spinOnce();
        loop_rate.sleep();
        
    }
}
