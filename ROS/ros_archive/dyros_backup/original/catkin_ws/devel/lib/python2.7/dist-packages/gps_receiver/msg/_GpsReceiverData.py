"""autogenerated by genpy from gps_receiver/GpsReceiverData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GpsReceiverData(genpy.Message):
  _md5sum = "6fcd8b41f0982f00b09b9c6b9702d7ca"
  _type = "gps_receiver/GpsReceiverData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 t
float64 utc
int32 gps_quality
int32 no_sats
float64 hdop
float64 latitude
float64 longitude
float64 altitude
float64 heading
float64 velocity
float64 tm_x
float64 tm_y

"""
  __slots__ = ['t','utc','gps_quality','no_sats','hdop','latitude','longitude','altitude','heading','velocity','tm_x','tm_y']
  _slot_types = ['float64','float64','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t,utc,gps_quality,no_sats,hdop,latitude,longitude,altitude,heading,velocity,tm_x,tm_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsReceiverData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t is None:
        self.t = 0.
      if self.utc is None:
        self.utc = 0.
      if self.gps_quality is None:
        self.gps_quality = 0
      if self.no_sats is None:
        self.no_sats = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.heading is None:
        self.heading = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.tm_x is None:
        self.tm_x = 0.
      if self.tm_y is None:
        self.tm_y = 0.
    else:
      self.t = 0.
      self.utc = 0.
      self.gps_quality = 0
      self.no_sats = 0
      self.hdop = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.heading = 0.
      self.velocity = 0.
      self.tm_x = 0.
      self.tm_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d2i8d.pack(_x.t, _x.utc, _x.gps_quality, _x.no_sats, _x.hdop, _x.latitude, _x.longitude, _x.altitude, _x.heading, _x.velocity, _x.tm_x, _x.tm_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.t, _x.utc, _x.gps_quality, _x.no_sats, _x.hdop, _x.latitude, _x.longitude, _x.altitude, _x.heading, _x.velocity, _x.tm_x, _x.tm_y,) = _struct_2d2i8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d2i8d.pack(_x.t, _x.utc, _x.gps_quality, _x.no_sats, _x.hdop, _x.latitude, _x.longitude, _x.altitude, _x.heading, _x.velocity, _x.tm_x, _x.tm_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.t, _x.utc, _x.gps_quality, _x.no_sats, _x.hdop, _x.latitude, _x.longitude, _x.altitude, _x.heading, _x.velocity, _x.tm_x, _x.tm_y,) = _struct_2d2i8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d2i8d = struct.Struct("<2d2i8d")
