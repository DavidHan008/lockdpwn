//////////////////////
h
/////////////////////
#include <std_msgs/Float32MultiArray.h>
#include <DataStructures.h>



    // Vehicle Localization Information
    float m_x;
    float m_y;
    float m_theta;
    float m_vel;
	
	
	ros::Publisher potential_array_publisher_;
	
	
	
/////////////////////////////////////////////////////////
cpp
////////////////////////////////////////////////////////
#include <MathParam.h>
#include <GeometricUtils.h>

void HeightMap::SubTopicProcess(const std_msgs::Float32MultiArray::ConstPtr& msg)
{
    //if(!m_bSubTopicUpdated)
    {
        //m_bSubTopicUpdated = true;
        m_x = msg->data.at(0);
        m_y = msg->data.at(1);
        m_theta = msg->data.at(2); // localization theta
        m_vel = msg->data.at(3); // vehicle velocity from obd2
    }
} // added by shinsh - 151001

HeightMap::HeightMap(ros::NodeHandle node, ros::NodeHandle priv_nh)
{
:
:
:
    potential_array_publisher_ = node.advertise<std_msgs::Float32MultiArray>("velodyne_potential_array", 1);
    possub = node.subscribe("LocalizationData", 1, &HeightMap::SubTopicProcess, this); // revised by shinsh - 151001

}

void HeightMap::constructGridClouds(const VPointCloud::ConstPtr &scan,
                                    unsigned npoints, size_t &obs_count,
                                    size_t &empty_count)
{

:
:
:
 // Localization Data
    potentialMultiArray.data.push_back(m_x);
    potentialMultiArray.data.push_back(m_y);
    potentialMultiArray.data.push_back(m_theta);
	potentialMultiArray.data.push_back(m_vel);
	
	for (int i = 0; i<grid_dim_; i++)
    {
        for (int j = 0; j<grid_dim_; j++)
        {
			float sign = 0.0;
            // transform index to local coordinate (x,y)
            double x = -grid_offset + (i*m_per_cell_+m_per_cell_/2.0);
            double y = -grid_offset + (j*m_per_cell_+m_per_cell_/2.0);
			float x_g = x;
            float y_g = y;

			
            // obstacle regions
            // : there are no direction vectors but having high potential values.
            if (num_obs[i][j] > 0)
            {
                
                GeometricUtils::TransLocalToGlobal(m_x, m_y, m_theta, x_g, y_g);

                vSize[i][j] = 0.0;

                // Vector Data
                potentialMultiArray.data.push_back(x_g);
                potentialMultiArray.data.push_back(y_g);
            }
		}
	}
	if( potentialMultiArray.data.size() > 3 && (potential_array_publisher_.getNumSubscribers() > 0) )
        potential_array_publisher_.publish(potentialMultiArray);
	
	
}