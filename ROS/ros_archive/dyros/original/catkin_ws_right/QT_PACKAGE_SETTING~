***  폴더 구조  ***
catkin_ws
	- build
		- ompl_qt_pkg
			* ui_test_ui_node_gui.h --> test_ui_node_gui.ui를 호출하기 위해 QT에서 header생성
	- devel
		- lib
			- ompl_qt_pkg
				* Binary File
			- pkgconfig
		- share
	- src
		-ompl_qt_pkg
			- inc $HDR_FILES_(NODENAME)
			- src $SRC_FILES_(NODENAME)
			- ui  $FORM_FILES_(NODENAME
========================================================================================================
1. 새로운 패키지를 catkin_create_pkg를 통해 생성
2. 새 UI를 src/ui/*.ui 에 복사
3. CMakeLists.txt를 빌드할 노드 속성에 반영하여 추가

**4. 패키지 내에 새로 노드를 추가할 경우에 아래 CMakeLists.txt 파일의 5~8번 항목을 병렬적으로 추가한다. 
==========================================================================================
1. 노드명 설정 
cmake_minimum_required(VERSION 2.8.3)
project(노드명)

2. 의존성있는 ROS 패키지 설정 
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
)

3. 의존성있는 QT 패키지 설정 
find_package(Qt4 REQUIRED COMPONENTS QtCore QtGui)
include(${QT_USE_FILE})

4. catkin_package 설정
catkin_package(
#  INCLUDE_DIRS inc
#  LIBRARIES lib
  CATKIN_DEPENDS roscpp std_msgs
  DEPENDS system_lib
)

5. 빌드할 노드의 파일들을 담을 환경변수를 설정
 set( HDR_FILES_노드이름 inc/ 헤더파일명.h)
 set( SRC_FILES_노드이름 src/ 소스파일명.cpp)
 set( FORM_FILES_노드이름 ui/ GUI파일명.ui)

6. QT에서 moc_ 파일을 생성하기 위해 QT4_WRAP 작업을 수행
 QT4_WRAP_CPP(MOC_SRC_H_노드이름 ${HDR_FILES_노드이름})
 QT4_WRAP_UI(MOC_GUI_H_노드이름 ${FORM_FILES_노드이름})

7. 실행파일을 빌드하기 위해 설정 - ORIGINAL CPP/H, moc를 통해 생성된 CPP/UI 파일
 add_executable( 노드이름 ${SRC_FILES_노드이름} ${HDR_FILES_노드이름} ${MOC_SRC_H_노드이름} ${MOC_GUI_H_노드이름} )

8. 라이브러리 링크
 target_link_libraries(
   노드이름 
   ${QT_LIBRARIES}
   ${catkin_LIBRARIES}
 )

*** Reference ***
http://rdu.im/ros/programming/2014/03/25/using-qt-in-ros-catkin-packages.html
