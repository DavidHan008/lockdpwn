// Generated by gencpp from file model_predictive_navigation/EgoGoal.msg
// DO NOT EDIT!


#ifndef MODEL_PREDICTIVE_NAVIGATION_MESSAGE_EGOGOAL_H
#define MODEL_PREDICTIVE_NAVIGATION_MESSAGE_EGOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model_predictive_navigation
{
template <class ContainerAllocator>
struct EgoGoal_
{
  typedef EgoGoal_<ContainerAllocator> Type;

  EgoGoal_()
    : r(0.0)
    , theta(0.0)
    , delta(0.0)
    , vMax(0.0)
    , k1(0.0)
    , k2(0.0)  {
    }
  EgoGoal_(const ContainerAllocator& _alloc)
    : r(0.0)
    , theta(0.0)
    , delta(0.0)
    , vMax(0.0)
    , k1(0.0)
    , k2(0.0)  {
  (void)_alloc;
    }



   typedef float _r_type;
  _r_type r;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _delta_type;
  _delta_type delta;

   typedef float _vMax_type;
  _vMax_type vMax;

   typedef float _k1_type;
  _k1_type k1;

   typedef float _k2_type;
  _k2_type k2;




  typedef boost::shared_ptr< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> const> ConstPtr;

}; // struct EgoGoal_

typedef ::model_predictive_navigation::EgoGoal_<std::allocator<void> > EgoGoal;

typedef boost::shared_ptr< ::model_predictive_navigation::EgoGoal > EgoGoalPtr;
typedef boost::shared_ptr< ::model_predictive_navigation::EgoGoal const> EgoGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_predictive_navigation::EgoGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace model_predictive_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'model_predictive_navigation': ['/home/dyros-vehicle/gitrepo/lockdpwn/ROS/catkin_ws/src/model_predictive_navigation/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8793baddedab0f35d8e3e4d6b9fdc7b";
  }

  static const char* value(const ::model_predictive_navigation::EgoGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8793baddedab0f3ULL;
  static const uint64_t static_value2 = 0x5d8e3e4d6b9fdc7bULL;
};

template<class ContainerAllocator>
struct DataType< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_predictive_navigation/EgoGoal";
  }

  static const char* value(const ::model_predictive_navigation::EgoGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r\n\
float32 theta\n\
float32 delta\n\
float32 vMax\n\
float32 k1\n\
float32 k2\n\
";
  }

  static const char* value(const ::model_predictive_navigation::EgoGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.theta);
      stream.next(m.delta);
      stream.next(m.vMax);
      stream.next(m.k1);
      stream.next(m.k2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_predictive_navigation::EgoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_predictive_navigation::EgoGoal_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "delta: ";
    Printer<float>::stream(s, indent + "  ", v.delta);
    s << indent << "vMax: ";
    Printer<float>::stream(s, indent + "  ", v.vMax);
    s << indent << "k1: ";
    Printer<float>::stream(s, indent + "  ", v.k1);
    s << indent << "k2: ";
    Printer<float>::stream(s, indent + "  ", v.k2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_PREDICTIVE_NAVIGATION_MESSAGE_EGOGOAL_H
