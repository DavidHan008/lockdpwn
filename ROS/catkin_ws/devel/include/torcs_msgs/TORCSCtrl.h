// Generated by gencpp from file torcs_msgs/TORCSCtrl.msg
// DO NOT EDIT!


#ifndef TORCS_MSGS_MESSAGE_TORCSCTRL_H
#define TORCS_MSGS_MESSAGE_TORCSCTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace torcs_msgs
{
template <class ContainerAllocator>
struct TORCSCtrl_
{
  typedef TORCSCtrl_<ContainerAllocator> Type;

  TORCSCtrl_()
    : header()
    , accel(0.0)
    , brake(0.0)
    , clutch(0.0)
    , gear(0)
    , steering(0.0)
    , focus(0.0)
    , meta(0)  {
    }
  TORCSCtrl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accel(0.0)
    , brake(0.0)
    , clutch(0.0)
    , gear(0)
    , steering(0.0)
    , focus(0.0)
    , meta(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _accel_type;
  _accel_type accel;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _clutch_type;
  _clutch_type clutch;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _steering_type;
  _steering_type steering;

   typedef double _focus_type;
  _focus_type focus;

   typedef uint8_t _meta_type;
  _meta_type meta;




  typedef boost::shared_ptr< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct TORCSCtrl_

typedef ::torcs_msgs::TORCSCtrl_<std::allocator<void> > TORCSCtrl;

typedef boost::shared_ptr< ::torcs_msgs::TORCSCtrl > TORCSCtrlPtr;
typedef boost::shared_ptr< ::torcs_msgs::TORCSCtrl const> TORCSCtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torcs_msgs::TORCSCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace torcs_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'torcs_msgs': ['/home/dyros-vehicle/gitrepo/lockdpwn/ROS/catkin_ws/src/torcs_ros/torcs_msgs/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4848a66993e5bb22e0199af44ab1d070";
  }

  static const char* value(const ::torcs_msgs::TORCSCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4848a66993e5bb22ULL;
  static const uint64_t static_value2 = 0xe0199af44ab1d070ULL;
};

template<class ContainerAllocator>
struct DataType< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torcs_msgs/TORCSCtrl";
  }

  static const char* value(const ::torcs_msgs::TORCSCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
# Virtual gas pedal (0 means no gas, 1 full gas)\n\
float64 accel\n\
# Virtual brake pedal (0 means no brake, 1 full brake)\n\
float64 brake\n\
# Virtual clutch pedal (0 means no clutch, 1 full clutch)\n\
float64 clutch\n\
# Gear value: -1,0,1,...,6 where -1 means backwards driving and 0 means idle\n\
uint8 gear\n\
# Steering value: -1 and +1 means respectively full right and\n\
# left, that corresponds to an angle of 0.366519 rad\n\
float64 steering\n\
# Focus direction for the focus sensors in degrees. Currently unused\n\
float64 focus\n\
# This is meta-control command: 0 do nothing, 1 ask compe-\n\
# tition server to restart the race. Currently unused\n\
uint8 meta\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::torcs_msgs::TORCSCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accel);
      stream.next(m.brake);
      stream.next(m.clutch);
      stream.next(m.gear);
      stream.next(m.steering);
      stream.next(m.focus);
      stream.next(m.meta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TORCSCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torcs_msgs::TORCSCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torcs_msgs::TORCSCtrl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "clutch: ";
    Printer<double>::stream(s, indent + "  ", v.clutch);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "focus: ";
    Printer<double>::stream(s, indent + "  ", v.focus);
    s << indent << "meta: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORCS_MSGS_MESSAGE_TORCSCTRL_H
