// Generated by gencpp from file torcs_msgs/TORCSSensors.msg
// DO NOT EDIT!


#ifndef TORCS_MSGS_MESSAGE_TORCSSENSORS_H
#define TORCS_MSGS_MESSAGE_TORCSSENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace torcs_msgs
{
template <class ContainerAllocator>
struct TORCSSensors_
{
  typedef TORCSSensors_<ContainerAllocator> Type;

  TORCSSensors_()
    : header()
    , angle(0.0)
    , currentLapTime(0.0)
    , damage(0.0)
    , distFromStart(0.0)
    , distRaced(0.0)
    , fuel(0.0)
    , gear(0)
    , lastLapTime(0.0)
    , racePos(0)
    , rpm(0.0)
    , trackPos(0.0)
    , wheelSpinVel()
    , z(0.0)  {
    }
  TORCSSensors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angle(0.0)
    , currentLapTime(0.0)
    , damage(0.0)
    , distFromStart(0.0)
    , distRaced(0.0)
    , fuel(0.0)
    , gear(0)
    , lastLapTime(0.0)
    , racePos(0)
    , rpm(0.0)
    , trackPos(0.0)
    , wheelSpinVel(_alloc)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _currentLapTime_type;
  _currentLapTime_type currentLapTime;

   typedef double _damage_type;
  _damage_type damage;

   typedef double _distFromStart_type;
  _distFromStart_type distFromStart;

   typedef double _distRaced_type;
  _distRaced_type distRaced;

   typedef double _fuel_type;
  _fuel_type fuel;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _lastLapTime_type;
  _lastLapTime_type lastLapTime;

   typedef uint8_t _racePos_type;
  _racePos_type racePos;

   typedef double _rpm_type;
  _rpm_type rpm;

   typedef double _trackPos_type;
  _trackPos_type trackPos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _wheelSpinVel_type;
  _wheelSpinVel_type wheelSpinVel;

   typedef double _z_type;
  _z_type z;




  typedef boost::shared_ptr< ::torcs_msgs::TORCSSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torcs_msgs::TORCSSensors_<ContainerAllocator> const> ConstPtr;

}; // struct TORCSSensors_

typedef ::torcs_msgs::TORCSSensors_<std::allocator<void> > TORCSSensors;

typedef boost::shared_ptr< ::torcs_msgs::TORCSSensors > TORCSSensorsPtr;
typedef boost::shared_ptr< ::torcs_msgs::TORCSSensors const> TORCSSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torcs_msgs::TORCSSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace torcs_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'torcs_msgs': ['/home/dyros-vehicle/gitrepo/lockdpwn/ROS/catkin_ws/src/torcs_ros/torcs_msgs/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torcs_msgs::TORCSSensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torcs_msgs::TORCSSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torcs_msgs::TORCSSensors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1fc40496a3236414af873ea65b87df2";
  }

  static const char* value(const ::torcs_msgs::TORCSSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1fc40496a323641ULL;
  static const uint64_t static_value2 = 0x4af873ea65b87df2ULL;
};

template<class ContainerAllocator>
struct DataType< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torcs_msgs/TORCSSensors";
  }

  static const char* value(const ::torcs_msgs::TORCSSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
# Angle between the car direction and the direction of the track axis [-PI,PI] in rad\n\
float64 angle\n\
# Time elapsed during current lap in seconds\n\
float64 currentLapTime\n\
# Current damage of the car (the higher is the value the higher is the damage)\n\
float64 damage\n\
# Distance of the car from the start line along the track line\n\
float64 distFromStart\n\
# Distance covered by the car from the beginning of the race\n\
float64 distRaced\n\
# Current fuel level\n\
float64 fuel\n\
# Current gear: -1 is reverse, 0 is neutral and the gear from 1 to 6\n\
uint8 gear\n\
# Time to complete the last lap\n\
float64 lastLapTime\n\
# Position in the race with respect to other cars\n\
uint8 racePos\n\
# Number of rotation per minute of the car engine\n\
float64 rpm\n\
# Distance between the car and the track axis. The value is\n\
# normalized w.r.t to the track width: it is 0 when car is on\n\
# the axis, -1 when the car is on the right edge of the track\n\
# and +1 when it is on the left edge of the car. Values greater\n\
# than 1 or smaller than -1 mean that the car is outside of\n\
# the track.\n\
float64 trackPos\n\
# Vector of 4 sensors representing the rotation speed of\n\
# wheels in radians\n\
float64[] wheelSpinVel\n\
# Distance of the car mass center from the surface of the track\n\
# along the Z axis in meters\n\
float64 z\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::torcs_msgs::TORCSSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angle);
      stream.next(m.currentLapTime);
      stream.next(m.damage);
      stream.next(m.distFromStart);
      stream.next(m.distRaced);
      stream.next(m.fuel);
      stream.next(m.gear);
      stream.next(m.lastLapTime);
      stream.next(m.racePos);
      stream.next(m.rpm);
      stream.next(m.trackPos);
      stream.next(m.wheelSpinVel);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TORCSSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torcs_msgs::TORCSSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torcs_msgs::TORCSSensors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "currentLapTime: ";
    Printer<double>::stream(s, indent + "  ", v.currentLapTime);
    s << indent << "damage: ";
    Printer<double>::stream(s, indent + "  ", v.damage);
    s << indent << "distFromStart: ";
    Printer<double>::stream(s, indent + "  ", v.distFromStart);
    s << indent << "distRaced: ";
    Printer<double>::stream(s, indent + "  ", v.distRaced);
    s << indent << "fuel: ";
    Printer<double>::stream(s, indent + "  ", v.fuel);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "lastLapTime: ";
    Printer<double>::stream(s, indent + "  ", v.lastLapTime);
    s << indent << "racePos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.racePos);
    s << indent << "rpm: ";
    Printer<double>::stream(s, indent + "  ", v.rpm);
    s << indent << "trackPos: ";
    Printer<double>::stream(s, indent + "  ", v.trackPos);
    s << indent << "wheelSpinVel[]" << std::endl;
    for (size_t i = 0; i < v.wheelSpinVel.size(); ++i)
    {
      s << indent << "  wheelSpinVel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wheelSpinVel[i]);
    }
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORCS_MSGS_MESSAGE_TORCSSENSORS_H
