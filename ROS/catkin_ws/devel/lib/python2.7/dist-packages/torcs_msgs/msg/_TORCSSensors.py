# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from torcs_msgs/TORCSSensors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TORCSSensors(genpy.Message):
  _md5sum = "a1fc40496a3236414af873ea65b87df2"
  _type = "torcs_msgs/TORCSSensors"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
# Angle between the car direction and the direction of the track axis [-PI,PI] in rad
float64 angle
# Time elapsed during current lap in seconds
float64 currentLapTime
# Current damage of the car (the higher is the value the higher is the damage)
float64 damage
# Distance of the car from the start line along the track line
float64 distFromStart
# Distance covered by the car from the beginning of the race
float64 distRaced
# Current fuel level
float64 fuel
# Current gear: -1 is reverse, 0 is neutral and the gear from 1 to 6
uint8 gear
# Time to complete the last lap
float64 lastLapTime
# Position in the race with respect to other cars
uint8 racePos
# Number of rotation per minute of the car engine
float64 rpm
# Distance between the car and the track axis. The value is
# normalized w.r.t to the track width: it is 0 when car is on
# the axis, -1 when the car is on the right edge of the track
# and +1 when it is on the left edge of the car. Values greater
# than 1 or smaller than -1 mean that the car is outside of
# the track.
float64 trackPos
# Vector of 4 sensors representing the rotation speed of
# wheels in radians
float64[] wheelSpinVel
# Distance of the car mass center from the surface of the track
# along the Z axis in meters
float64 z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','angle','currentLapTime','damage','distFromStart','distRaced','fuel','gear','lastLapTime','racePos','rpm','trackPos','wheelSpinVel','z']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','uint8','float64','uint8','float64','float64','float64[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,angle,currentLapTime,damage,distFromStart,distRaced,fuel,gear,lastLapTime,racePos,rpm,trackPos,wheelSpinVel,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TORCSSensors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.angle is None:
        self.angle = 0.
      if self.currentLapTime is None:
        self.currentLapTime = 0.
      if self.damage is None:
        self.damage = 0.
      if self.distFromStart is None:
        self.distFromStart = 0.
      if self.distRaced is None:
        self.distRaced = 0.
      if self.fuel is None:
        self.fuel = 0.
      if self.gear is None:
        self.gear = 0
      if self.lastLapTime is None:
        self.lastLapTime = 0.
      if self.racePos is None:
        self.racePos = 0
      if self.rpm is None:
        self.rpm = 0.
      if self.trackPos is None:
        self.trackPos = 0.
      if self.wheelSpinVel is None:
        self.wheelSpinVel = []
      if self.z is None:
        self.z = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.angle = 0.
      self.currentLapTime = 0.
      self.damage = 0.
      self.distFromStart = 0.
      self.distRaced = 0.
      self.fuel = 0.
      self.gear = 0
      self.lastLapTime = 0.
      self.racePos = 0
      self.rpm = 0.
      self.trackPos = 0.
      self.wheelSpinVel = []
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6dBdB2d.pack(_x.angle, _x.currentLapTime, _x.damage, _x.distFromStart, _x.distRaced, _x.fuel, _x.gear, _x.lastLapTime, _x.racePos, _x.rpm, _x.trackPos))
      length = len(self.wheelSpinVel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.wheelSpinVel))
      buff.write(_struct_d.pack(self.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 74
      (_x.angle, _x.currentLapTime, _x.damage, _x.distFromStart, _x.distRaced, _x.fuel, _x.gear, _x.lastLapTime, _x.racePos, _x.rpm, _x.trackPos,) = _struct_6dBdB2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.wheelSpinVel = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.z,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6dBdB2d.pack(_x.angle, _x.currentLapTime, _x.damage, _x.distFromStart, _x.distRaced, _x.fuel, _x.gear, _x.lastLapTime, _x.racePos, _x.rpm, _x.trackPos))
      length = len(self.wheelSpinVel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.wheelSpinVel.tostring())
      buff.write(_struct_d.pack(self.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 74
      (_x.angle, _x.currentLapTime, _x.damage, _x.distFromStart, _x.distRaced, _x.fuel, _x.gear, _x.lastLapTime, _x.racePos, _x.rpm, _x.trackPos,) = _struct_6dBdB2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.wheelSpinVel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.z,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6dBdB2d = struct.Struct("<6dBdB2d")
_struct_d = struct.Struct("<d")
