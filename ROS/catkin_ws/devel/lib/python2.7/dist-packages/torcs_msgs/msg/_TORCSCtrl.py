# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from torcs_msgs/TORCSCtrl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TORCSCtrl(genpy.Message):
  _md5sum = "4848a66993e5bb22e0199af44ab1d070"
  _type = "torcs_msgs/TORCSCtrl"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
# Virtual gas pedal (0 means no gas, 1 full gas)
float64 accel
# Virtual brake pedal (0 means no brake, 1 full brake)
float64 brake
# Virtual clutch pedal (0 means no clutch, 1 full clutch)
float64 clutch
# Gear value: -1,0,1,...,6 where -1 means backwards driving and 0 means idle
uint8 gear
# Steering value: -1 and +1 means respectively full right and
# left, that corresponds to an angle of 0.366519 rad
float64 steering
# Focus direction for the focus sensors in degrees. Currently unused
float64 focus
# This is meta-control command: 0 do nothing, 1 ask compe-
# tition server to restart the race. Currently unused
uint8 meta

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','accel','brake','clutch','gear','steering','focus','meta']
  _slot_types = ['std_msgs/Header','float64','float64','float64','uint8','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,accel,brake,clutch,gear,steering,focus,meta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TORCSCtrl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.accel is None:
        self.accel = 0.
      if self.brake is None:
        self.brake = 0.
      if self.clutch is None:
        self.clutch = 0.
      if self.gear is None:
        self.gear = 0
      if self.steering is None:
        self.steering = 0.
      if self.focus is None:
        self.focus = 0.
      if self.meta is None:
        self.meta = 0
    else:
      self.header = std_msgs.msg.Header()
      self.accel = 0.
      self.brake = 0.
      self.clutch = 0.
      self.gear = 0
      self.steering = 0.
      self.focus = 0.
      self.meta = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB2dB.pack(_x.accel, _x.brake, _x.clutch, _x.gear, _x.steering, _x.focus, _x.meta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.accel, _x.brake, _x.clutch, _x.gear, _x.steering, _x.focus, _x.meta,) = _struct_3dB2dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dB2dB.pack(_x.accel, _x.brake, _x.clutch, _x.gear, _x.steering, _x.focus, _x.meta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.accel, _x.brake, _x.clutch, _x.gear, _x.steering, _x.focus, _x.meta,) = _struct_3dB2dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3dB2dB = struct.Struct("<3dB2dB")
