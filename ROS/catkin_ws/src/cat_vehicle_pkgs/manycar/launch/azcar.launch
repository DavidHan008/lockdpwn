<launch>
<arg name="robot_num"/>
<arg name="init_pose"/>

<node name="urdf_spawner$(arg robot_num)" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
args="$(arg init_pose) -urdf -model manycar$(arg robot_num) -param robot_description"/>

<!-- Load joint controller configurations from YAML file to parameter server -->
<rosparam file="$(find manycar)/config/manycar_control.yaml" command="load"/>


<!-- load the controllers -->
<node name="controller_spawner$(arg robot_num)" pkg="controller_manager" type="spawner" respawn="false"
output="screen" args="joint1_velocity_controller joint2_velocity_controller front_left_steering_position_controller                          front_right_steering_position_controller  joint_state_controller"/>

<!-- convert joint states to TF transforms for rviz, etc -->
<node name="robot_state_publisher$(arg robot_num)" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/manycar$(arg robot_num)/joint_states" />
</node>

<!-- need for publishing joint states that are not controlled -->
<node name="joint_state_publisher$(arg robot_num)" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/manycar$(arg robot_num)/joint_states" />
</node>

<!-- needed in order to accept cmd_vel inputs to drive the car 
<node name="cmdvel2gazebo$(arg robot_num)" pkg="manycar" type="cmdvel2gazebo.py" respawn="false" output="screen"> </node>
-->
</launch>

