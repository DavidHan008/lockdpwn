<launch>
  <arg name="robot_name"/>
  <arg name="init_pose"/>
  <arg name="config_file"/>

  <rosparam param="/use_sim_time">true</rosparam>

  <node name="urdf_spawner$(arg robot_name)" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="$(arg init_pose) -urdf -model $(arg robot_name) -param robot_description"/>


  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find all_in_one)/config/$(arg config_file)" command="load" ns="/$(arg robot_name)"/>
  <param name="tf_prefix" value="$(arg robot_name)"/>


    <!-- load the controllers -->
  <node name="controller_spawner$(arg robot_name)" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/$(arg robot_name)" args="joint1_velocity_controller joint2_velocity_controller front_left_steering_position_controller front_right_steering_position_controller  joint_state_controller"/>


  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher$(arg robot_name)" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
  </node>



  <!-- need for publishing joint states that are not controlled -->
  <node name="joint_state_publisher$(arg robot_name)" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
  </node>


  <!-- set up a static TF transform for publishing SLAM localization estimates wrt base_link -->
  <node pkg="tf" type="static_transform_publisher" name="base_link2slamodom_tf_$(arg robot_name)" 
        args="0 0 0 0 0 0 $(arg robot_name)/base_link $(arg robot_name)/slamodom 5" />


  <!-- we run the python version, so we can be slower-than-real-time -->
  <node name="cmdvel2gazebo$(arg robot_name)" pkg="all_in_one" type="cmdvel2gazebo.py" respawn="false" output="screen"> 
    <remap from="/all_in_one/cmd_vel" to="/$(arg robot_name)/cmd_vel_safe" />
  </node>

  
  <node name="distanceEstimator" pkg="all_in_one" type="distanceEstimator" output="screen">
    <param name="scan_topic" value="/$(arg robot_name)/front_laser_points"/>
  </node>


  <!-- Let's be safe with obstacles by stopping when we get too close -->
  <node name="obstacleStopper$(arg robot_name)" pkg="obstaclestopper_dyros" type="obstaclestopper_dyros_node" output="screen">
    <remap from="/all_in_one/cmd_vel" to="/$(arg robot_name)/cmd_vel" />
    <remap from="/all_in_one/distanceEstimator" to="/$(arg robot_name)/distanceEstimator" />
    <remap from="/all_in_one/cmd_vel_safe" to="/$(arg robot_name)/cmd_vel_safe" /> 
  </node>


  <!-- publish the path information of this vehicle -->
  <node name="odom2path$(arg robot_name)" pkg="all_in_one" type="odom2path.py" respawn="true" output="screen" args="-n /$(arg robot_name)">
  </node>


</launch>
