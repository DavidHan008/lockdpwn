library(genalg)
install.packages("genalg")
library(ggplot2)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "unions", "sellping bag", "rope", "compass"), survivalpoints = c(10, 20,15,2,30,10,30), weights = c(1,5,10,1,7,5,1))
dataset
weightlimit <- 20
chromosome = c(1,0,0,1,1,0,0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
dataset$survivalpoints
chromosome
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
evalFunc
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
rbga
library(genalg)
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
cat(summary.rbga(GAmodel))
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
summary(GAmodel)
help(rbga)
help(rbga.bin)
install.packages("GA")
library(GA)
f <- function(x) 3*x*x - 2 *x + 5
fitness <- function(x) - f(x)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
summary(GA)
plot(GA)
curve(f, -5, 5)
abline( v= GA@solution, lty=3)
abline( v= GA@solution, lty=30)
help(abline)
abline( v= GA@solution, lty=1)
abline( v= GA@solution, lty=2)
abline( v= GA@solution, lty=3)
abline( v= GA@solution, lty=4)
curve(f, -5, 5)
abline( v= GA@solution, lty=4)
abline( v= GA@solution, lty=3)
'''
R ==> 머신러닝처음, Rule Based Classification을 적용해 중고등학생의 보충교육시간을 적절하게 선택해보는 예제 코드
적용도 : 확률
정확도 : 조건부확률
가능도비율 : 관찰도수 / 기대도수
'''
test <- read.csv("rule.csv", header = T)
test
'''
R ==> 머신러닝처음, Rule Based Classification을 적용해 중고등학생의 보충교육시간을 적절하게 선택해보는 예제 코드
적용도 : 확률
정확도 : 조건부확률
가능도비율 : 관찰도수 / 기대도수
'''
'''
R ==> 머신러닝처음, Rule Based Classification을 적용해 중고등학생의 보충교육시간을 적절하게 선택해보는 예제 코드
적용도 : 확률
정확도 : 조건부확률
가능도비율 : 관찰도수 / 기대도수
'''
fitness
fitness(1)
fitness(0)
function(1)
function(1) - f(1)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
help(ga)
summary(GA)
curve(f,-10,10)
curve(f,-20,20)
fitness <- function(x){
-f(x) }
fitness
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
summary(GA)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 10)
summary(GA)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 2)
summary(GA)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
summary(GA)
f(0.333)
fitness <- function(x){ f(x) }
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
summary(GA)
f(-19.91)
curve(f,-20,20)
abline(v = GA@solution,lty=3)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
curve(f,-20,20)
abline(v = GA@solution,lty=3)
f
f <- function(x) 4*x*x*x + 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 4*x*x*x - 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 5*x*x*x*x + 4*x*x*x + 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 5*x*x*x*x + 4*x*x*x - 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 5*x*x*x*x - 4*x*x*x + 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 5*x*x*x*x - 4*x*x*x - 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) -5*x*x*x*x + 4*x*x*x - 3*x*x - 2 *x + 5
curve(f,-20,20)
f <- function(x) 5*x*x*x*x - 4*x*x*x - 3*x*x - 2 *x + 5
GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20, popSize = 50, maxiter= 100)
summary(GA)
abline(v = GA@solution,lty=3)
plot(GA)
test1 <- function(x1,x2)
(x1-2)^2 + (x2-5)^2 + 10
x1 <- seq(-10, 10, by =0.1)
x2 <- seq(-10,10, by = 0.1)
x1
x2
f <- outer(x1,x2, test1)
f
persp(x1,x2,f,theta = 180, phi = 80)
filled.contour(x1,x2,f,color.palette = jet.colors)
GA <- ga(type = "real-valued", fitness = function(x) -test1(x[1],x[2]), min =c(-10,-10), max = c(10,10), popSize = 30, maxiter= 100)
summary(GA)
plot(GA)
persp3d(x1,x2,f,theta = 180, phi = 80)
persp3D(x1,x2,f,theta = 180, phi = 80)
persp3D(x1,x2,f,theta = 180, phi = 180)
persp3D(x1,x2,f,theta = 180, phi = 90)
persp3D(x1,x2,f,theta = 180, phi = 270)
persp3D(x1,x2,f,theta = 270, phi = 270)
persp3D(x1,x2,f,theta = 270, phi = 0)
persp3D(x1,x2,f,theta = 270, phi = 90)
persp3D(x1,x2,f,theta = 270, phi = 45)
persp3D(x1,x2,f,theta = 135, phi = 45)
persp3D(x1,x2,f,theta = 30, phi = 30)
test1 <- function(x1,x2) (x1-2)^2 + (x2-5)^2 + 10
x1 <- seq(-10, 10, by = 0.1)
x2 <- seq(-10, 10, by = 0.1)
f <- outer(x1,x2, test1)
persp3D(x1, x2, f, theta = 30, phi = 30)
filled.contour(x1,x2,f,color.palette = jet.colors)
GA <- ga(type = "real-valued", fitness = function(x) -test1(x[1],x[2]), min =c(-10,-10), max = c(10,10), popSize = 30, maxiter= 100)
summary(GA)
plot(GA)
