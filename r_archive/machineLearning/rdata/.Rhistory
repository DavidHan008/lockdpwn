aaa <- glm(Retained ~ HSGPA, family = "binomial")
summary(aaa)
plot(Retained, HSGPA)
plot(HSGPA, Retained
)
plot(HSGPA, Retained)
head(retention)
pred <- predict(results)
pred <- predict(results, interval = "prediction")
points(pred)
points(pred,col = "red")
pred <- predict(results)
points(pred,col = "red")
pred
x <- 2:4.5:0.1
x <- seq(2:4.5:0.1)
x
x <- seq(2,4.5,0.1)
x
y <- -2.8675 + 0.95*x
points(x,y)
points(x,y, col = "red")
plot(x,y, col = "red")
plot(results)
plot(aaa)
confint <- predict(aaa, interval = "confidence")
predint <- predict(aaa, interval = "prediction")
intervals <- cbind(confit, predint)
intervals <- cbind(confint, predint)
intervals <- edit(intervals)
plot(intervals[,1])
plot(intervals[,2])
plot(intervals[,3])
plot(intervals[,1])
points(intervals[,2],col="red")
head(intervals)
View(intervals)
results <- glm(Retained ~ Pref + Athlete + FRHours + HSGPA + SATtot + Gender, family ="binomial")
with(results, null.deviance - deviance)
?with
with(results, df.null - df.residual)
null.deviance
null.deviance - deviance
results
head(results$fitted.values)
cbind(head(results$fitted.values))
results <- glm(Retained ~ PREF)
results <- glm(Retained ~ Pref)
results <- glm(Retained ~ Pref + Athlete + HSGPA , family = "binomial")
head(results$fitted.values)
cbind(head(results$fitted.values))
results
head(retention)
table(Retained, risk)
risk <- round(results$fitted.values)
risk
table(Retained,risk)
187 + 513
chisq.test(table(Retained,risk))
logits <- array(dim=c(958))
logits
dim
c(958)
dim = c(958)
dim
logits <- array(958)
logits
logits <- array(dim = 958)
logits
fitted <- results$fitted.values
for (i in 1:958) logits[i] <- log((fitted[i])/(1-fitted[i]))
plot(logits,fitted)
logits
mulreg <- lm(Retained ~ Pref + Athlete + HSGPA)
summary(mulreg)
hist(mulreg$fitted.values)
HSGPA
data <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
data
head(data)
load("C:/Users/vdl/Documents/R/Beginning R Data/mixed.rda")
mixed
1 - pchisq(171.41,9)
o <- c(9,13,20,10,22,23,72,10,10,7)
chisq.test(o)
load("C:/Users/vdl/Documents/R/Beginning R Data/phicorrelation.rda")
phicorrelation
head(phicorrelation)
load("C:/Users/vdl/Documents/R/Beginning R Data/mwsmall.rda")
mwsmall
load("C:/Users/vdl/Documents/R/Beginning R Data/friedman.long.rda")
friedman.long
load("C:/Users/vdl/Documents/R/Beginning R Data/signedranks.rda")
signedRanks
exp <- c(.374, .357, .085, .034, .066,.063,.015,.006)
obs <- c(195,165,47,15,30,35,8,5)
chisq.test(obs, p = exp)
location <- c(1,2,3)
news <- c(170,120,130)
sport <- c(124,112,90)
sprot
sport
comics <- c(90,100,88)
paper <- cbind(location, news, sports, comics)
paper <- cbind(location, news, sport, comics)
paper
?cbind
?%*%
paper
colmargin <- c(384,332,308)
rowmargin <- c(420,326,278)
sampsize <- 1024
colmargin <- t(colmargin)
expected <- (colmargin %*% rowmargin)/sampsize
expected
rowmargin
colmargin
colmargin <- t(colmargin)
colmargin
expected <- (colmargin %*% rowmargin)/sampsize
expected
paper <- paper[,-1]
paper
chisq.test(paper)
female <- c(18,102)
male <- c(10,110)
migraine <- cbind(female, male)
migraine
chisq.test(migraine)
chisq.test(migraine, correct = FALSE)
count <- c(18,10)
total <- c(120,120)
prop.test(count, total, correct =FALSE)
p1<-.15
p2 <- .08333
q1 <- 1-p1
q2 <- 1-p2
var1 <- p1 *q1
var2 <- p2*q2
n1 <- 120
n2 <- 120
se <- sqrt(var1/n1 + var2/n2)
z <- (p1 -p2)/se
z
z^2
eng ,- c(5,18)
eng <- c(5,18)
soc <- c(7,14)
sexmajor <- rbind(eng,soc)
sexmajor
chisq.test(sexmajor , correct = FALSE)
phi
require(psych)
phi
phi(sexmajor, digits = 2)
load("C:/Users/vdl/Documents/R/Beginning R Data/signedranks.rda")
signedRanks
load("C:/Users/vdl/Documents/R/Beginning R Data/spearman.rda")
spearman
score <- c(8,3,4,6,1,7,9,10,12)
group <- c(A,A,A,A,B,B,B,B,B)
group <- c("A","A","A","A","B","B","B","B","B")
maanwhitney <- cbind(score,group)
maanwhitney
order <- rank(score)
order
score
maanwhitney <- cbind(maanwhitney, order)
maanwhitney
tapply(order, group, sum)
n1 <- 20
n2 <- 20
N <- n1 * n2
Utable <- matrix(c(1:N), ncol <- n1 , byrow = TRUE)
Utable
?matrix
Utable <- matrix(c(1:N), ncol <- n1)
Utable
Utable <- matrix(c(1:N), ncol <- n1, byrow = TRUE)
for (m in 1:20)
{}
for (m in 1:20)
{
for (n in 1:20)
{
Utable[m,n] <- qwilcox(.05,m,n)
}
}
m
n
Utable
?qwilcox
wilcox.test(order ~ group)
wilcox.test(score ~ group)
load("C:/Users/vdl/Documents/R/Beginning R Data/mwsmall.rda")
mwsmall
load("C:/Users/vdl/Documents/R/Beginning R Data/mwlarge.rda")
mwlarge
maanwhitney
mannwhitney
mannwhitneylarge
head(mannwhitneylarge)
attach(mannwhitneylarge)
rr <- rank(Leaders)
mannwhitneylarge <- cbind(mannwhitneylarge, rr)
mannwhitneylarge
tapply(Leaders,Control,var)
tapply(rr, Control, sum)
wilcox.test(Leader ~ Control)
wilcox.test(Leaders ~ Control)
2 * (1- pnorm(2.2238))
signedRanks
attach(signedRanks)
wilcox.test(treatment, contro, paried = TRUE)
wilcox.test(treatment, control, paried = TRUE)
treatment
control
wilcox.test(treatment, control)
wilcox.test(treatment, control, paried = TRUE)
x = c(11.2, 11.0, 12.0, 13.0, 12.5, 10.5, 5.8, 6.2, 14.0, 12.2)
sign.test <- function(median, y){
z = sort(y)
n = length(z)
b = sum(z > median)
pbinom(b-1, n, 0.5, lower.tail=FALSE)
}
sign.test(10,x)
A지역 <- c(158, 105, 72, 125, 56, 129, 63, 161, 190, 114, 43, 27)
B지역 <- c(124, 169, 76, 24, 62, 95, 142, 79, 112, 64, 61, 106, 126, 162,
83, 91, 153, 148, 21, 107, 167,65, 109, 42)
wilcox.test(A지역, B지역, alternative= "g", exact = TRUE)
A <- c(3, 5, 10, 14, 30)
B <- c(6, 8, 12, 13, 20)
C <- c(2, 4,  9, 16, 27, 28)
list(A,B,C)
A
kruskal.test(list(A,B,C))
var(A)
var(B)
var(C)
x <- c(95, 70, 60, 73, 62, 71, 75)
y <- c(88, 65, 63, 78, 70, 76, 73)
cor.test(x,y, method = "spearm")
x
rank(x)
x <- 1
y <- 2
a = c(1,2,3)
a
b = 1:10
b
a = matrix(1:12, ncol=3)
a
t.test(a)
t.test(b)
accdata
bingedata
head(bingedata)
head(hours)
head(dataset)
t.test(Quiz1 ~ Sex)
attach(dataset)
t.test(Quiz1 ~ Sex)
summary(Quiz1)
summary(Quiz1 ~ Sex)
x <- c(1,20,0.1)
y <- sin(x)
plot(x,y)
plot(y,x)
x
x <- seq(1,20,0.1)
y <- sin(x)
plot(x,y)
plot(x,y,type = "l")
plank <- 1:8
plank
dim(plank) <- c(2,4)
plank
dim(plank) <- c(2,3)
dim(plank) <- c(4,2
)
plank
persp(plank)
persp(plank,expand=0.2)
contour(plank)
image(plank)
micromid
micrototal
std <- sd(micrototal)
std
summary(micrototal)
plot(micrototal )
barplot(micrototal)
setwd("C:/Users/vdl/git/lockdpwn/r_archive/machineLearning/rdata")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T)
academy
head(academy)
dist_academy <- dist(academy, method="euclidean")
head(dist_academy)
dist_academy
food <- read.csv("food.csv", stringsAsFactors = F, header=T)
food <- food[-1]
academy <- academy[-1]
dist_academy <- dist(academy, method="euclidean")
dist_academy
food.mult <- t(as.matrix(food)) %*% as.matrix(food)
skin <- read.csv("read.csv", header= T)
skin <- read.csv("skin.csv", header= T)
skin <- skin[-1]
str(skin)
mat_academy <- as.matrix(dist_academy)
temp_mat <- mat_academy[1:5, 1:5]
rownames(temp_mat) <- LETTERS[1:5]
temp_mat
colnames(temp_mat) <- LETTERS[1:5]
diag(temp_mat) <- rep(9999,5)
temp_mat
pos <- which(temp_mat == min(temp_mat))[1]
pos
rown <- pos %/% 5 + 1
rown
coln <- pos %% 5 ; if (coln == 0) rown = rown - 1 ; coln = 5
coln
temp_mat2 <- temp_mat[c(-2,-4) , c(-2,-4)]
temp_mat2 <- rbind(temp_mat2, BD = rep(0,3))
temp_mat2
temp_mat2 <- cbind(temp_mat2, BD = rep(0,3))
temp_mat2
c(-2,-5)
new_distance <- c()
new_distance
for (i in setdiff(c(1:5), c(2,4))) { #1,3,5}
new_distance <- c(new_distance, min(temp_mat[i,2] , temp_mat[i,4])) }
for (i in setdiff(c(1:5), c(2,4))) { #1,3,5
new_distance <- c(new_distance, min(temp_mat[i,2] , temp_mat[i,4])) }
new_distance
new_distance <- c(new_distance,9999)
new_distance
temp_mat2[dim(temp_mat2)[1],] <- new_distance
temp_mat2
temp_mat2[,dim(temp_mat2)[1]] <- new_distance
new_distance <- new_distance[-4]
new_distance
new_distance <- new_distance[-4]
new_distance
new_distance <- new_distance[-1]
new_distance
new_distance <- new_distance[-1]
new_distance <- new_distance[-1]
new_distance <- new_distance[-1]
new_distance
new_distance <- new_distance[-1]
for (i in setdiff(c(1:5), c(2,4))) { #1,3,5
new_distance <- c(new_distance, min(temp_mat[i,2] , temp_mat[i,4])) }
new_distance <- c(new_distance,9999)
new_distance
temp_mat2[,dim(temp_mat2)[1]] <- new_distance
temp_mat2[dim(temp_mat2)[1],] <- new_distance
temp_mat2
pos <- which(temp_mat2 == min(temp_mat2))[1]
rown <- pos %/% 4 + 1
coln <- pos %% 4 ; if (coln == 0) rown = rown -1 ; coln=4
coln
rown
temp_mat3 <- temp_mat2[c(-3,-4) , c(-3,-4)]
temp_mat3 <- rbind(temp_mat3, BD = rep(0,3))
temp_mat3 <- cbind(temp_mat3, BED = rep(0,3))
temp_mat3 <- rbind(temp_mat3, BED = rep(0,3))
temp_mat3
dis <- function(x,y) {}
dis <- function(x,y){
return ((x[1] - x[2])^2 + (y[1] - y[2])^2)
}
x <- c(rnom(20,3,1), rnorm(20,7,1))
x <- c(rnorm(20,3,1), rnorm(20,7,1))
x
help(rnorm)
rnorm(5,3,1)
y <- c(rnorm(20,4,1), rnorm(20,8,1))
plot(x,y, cex=.5, xlim=c(0,10), ylim=c(0,10))
setwd("C:/Users/vdl/git/lockdpwn/r_archive/machineLearning/rcode")
c <- locator(2) ; print(c)
points(c$x , c$y , pch=20 , col="red")
c <- locator(2) ; print(c)
points(c$x , c$y , pch=20 , col="red")
plot(x,y, cex=.5, xlim=c(0,10), ylim=c(0,10))
help(locator)
help(points)
help(locator)
c <- locator(2) ; print(c)
points(c$x , c$y , pch=20 , col="red")
distance1 <- c()
for (i in 1:length(x)){
lines(c(x[i], c$x[i]), c(y[i], c$y[1]), lty=2))
lines(c(x[i], c$x[i]), c(y[i], c$y[1]), lty=2)
for (i in 1:length(x)){
lines(c(x[i], c$x[i]), c(y[i], c$y[1]), lty=2)
distance1 <- c(distance1, dis
a
for (i in 1:length(x)){
lines(c(x[i], c$x[1]), c(y[i], c$y[1]), lty=2)
distance1 <- c(distance1, dis(c(x[i], c$x[1]), c(y[i], c$y[1])))
}
distance1
x
plot(x,y , cex = 5, xlim = c(0,10), ylim=c(0,10))
points(c$x, c$y, pch=20, col="red")
distance2 <- c()
for (i in 1:length(x)){
lines(c(x[i], c$x[2]), c(y[i], c$y[2]), lty=2)
distance2 <- c(distance2, dis(c(x[i], c$x[2]), c(y[i], c$y[2])))
}
plot(x,y , cex = .5, xlim = c(0,10), ylim=c(0,10))
for (i in 1:length(x)){
+ lines(c(x[i], c$x[2]), c(y[i], c$y[2]), lty=2)
+ distance2 <- c(distance2, dis(c(x[i], c$x[2]), c(y[i], c$y[2])))
+ }
for (i in 1:length(x)){
lines(c(x[i], c$x[2]), c(y[i], c$y[2]), lty=2)
distance2 <- c(distance2, dis(c(x[i], c$x[2]), c(y[i], c$y[2]))) }
points(c$x, c$y, pch=20, col="red")
clusters <- c()
f <- factor(distance1 > distance2)
f
levels(f) <- c("1", "2")
f
x1_var <- mean(x[f == "1"])
x1_var
x2_var <- mean(x[f == "2"])
y1_var <- mean(y[f == "1"])
y2_var <- mean(y[f == "2"])
x1_var;x2_var;y1_var;y2_var
f
x
y
length(x)
length(f)
distance1
clear(f)
cls(f)
rm(f)
f
f <- factor(distance1 > distance2)
f
distance1
distance2
type(distance2)
distance2 <- distance2[1:(length(distance2)-40)]
distance2
rm(f)
f <- factor(distance1 > distance2)
f
levels(x = f) <- c("1","2")
f
x1_var <- mean(x[f == "1"])
x2_var <- mean(x[f == "2"])
y1_var <- mean(y[f == "1"])
y2_var <- mean(y[f == "2"])
x1_var
x1_var,x2_var,y1_var,y2_var
x1_var;x2_var;y1_var;y2_var
c$x - c(x1_var, x2_var)
c$y - c(y1_var, y2_var)
help("cancor")
library(cluster)
hcl <- hclust(dist(academy)^2 , method="single")
hcl
plot(hcl, hang=-1 , xlam = "strudent", ylab = "distance")
plot(hcl, hang=-1 , xlam = "student", ylab = "distance")
academy
setwd("C:/Users/vdl/git/lockdpwn/r_archive/machineLearning/rdata")
head(academy)
library(graphics)
kms <- kmeans(academy, 5); kms
plot(academy, col = kms$cluster)
wss <- 0
for(i in 1:10) wss[i] <- sum(kmeans(academy, centers = i)$withinss)
wss
plot(1:10, wss ,type="b", xlab = "number of clusters", ylab = "within group sum of squares")
like <- read.csv("like.csv", stringsAsFactors = F, header = T)
colnames(like) <- c("talk", "book", "travel", "school", "tall", "skin", "muscle","label")
like
test <- data.frame(talk = 70, book= 50, travel= 30, school =70 , tall =70, skin = 40, muscle=50)
test
library(class)
train <- like[,-8]
train
group <- like[,8]
group
knnpred1 <- knn(train, test, group, k=3, prob = TRUE)
knnpred
knnpred1
knnpred2 <- knn(train, test, group, k=4, prob = TRUE)
knnpred2
buy <- read.csv("buy.csv", stringsAsFactors = F, header = T)
buy$age <- scale(buy$나이)
buy$pay <- scale(buy$월수입)
buy
test <- data.frame((age =44, pay=400))
test <- data.frame(age =44, pay=400)
test
train <- buy[,c(4,5)]
train
label <- buy[,3]
label
test$age <- (test$age - mean(buy$나이)) / sd(buy$나이)
test$pay <- (test$pay - mean(buy$월수입)) / sd(buy$월수입)
knnpred1 <- knn(train, test, labels, k=5, prob=TRUE)
knnpred1 <- knn(train, test, label, k=5, prob=TRUE)
knnpred2 <- knn(train, test, label, k=6, prob=TRUE)
knnpred1
knnpred2
