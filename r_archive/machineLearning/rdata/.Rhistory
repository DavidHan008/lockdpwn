turkeyHSD
library("psych", lib.loc="~/R/win-library/3.3")
library("stats", lib.loc="C:/Program Files/R/R-3.3.2/library")
turkey
TukeyHSD(results)
pairwise.t.test(mileage,group,p.adjust.method = "bonferroni")
anova(lm(mileage ~ group))
y <- sort(weights)
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/weights.rda")
attach(weights)
y <- sort(weights)
x <- sort(rnorm(40,70,6))
matrix <- cbind(x,y)
matrix
head(matrix)
cov(x,y)
cor(x,y)
plot(x,y)
abline(lm(y ~ x))
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/signedranks.rda")
signedRanks
attach(signedRanks)
wilcox.test(treatment, control, paired = TRUE)
diffs <-treament - control
diffs <-treatment - control
diffs
treatment
control
signedRanks
order <- rank(diffs)
signs <- c(1,1,-1,1,1,1,1)
signed <- order * signs
signed
signedRanks <- cbind(signedRanks, diffs, order, signs, signed)
signedRanks
tapply(signed, signs, sum)
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/mpg.rda")
mpg
attach(mpg)
order <- rank(mileage)
order
mileage <- cbind(mileage,order)
tapply(order, brand, sum)
sum(order)
length(order)
15*16/2
1-pchisq(9.555,2)
kruskal.test(mileage,brand)
mileage
mileage <- mileage[,-2]
mileage
kruskal.test(mileage,brand)
aov(mileage ~ brand)
results <- aov(mileage ~ brand)
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/friedman.rda")
friedman
attach(friedman)
rt1 <- rank(time1)
rt1
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/spearman.rda")
spearman
head(spearman)
attach(spearman)
LocRank <- rank(Locations)
SalesRank <- rank(Sales)
spearman <- cbind(spearman, LockRank, SalesRank)
spearman <- cbind(spearman, LocRank, SalesRank)
spearman
plot(Locations , Sales, abline(lm(Sales ~ Locations)))
diffs <- LocRank - SalesRank
diffs
diffssq <- sum(diffs^2)
cor(SalesRank, LocRank)
cor.test(SalesRank, LocRank, method = "kendall")
cor(Locations,Sales)
cor(SalesRank, LocRank)
cor.test(SalesRank, LocRank, method = "kendall")
set.seed(7)
z1 <- rnorm(10)
z1
set.seed(7)
z2 <- rnorm(10)
z2
z2
z3 <- rnorm(10)
z3
nreps <- 10000
ll <- numeric(nreps)
ul <- numeric(nreps)
n<-100
mu <- 500
sigma <- 100
for (i in 1:nreps)
{
set.seed(i)
x <- rnorm(n,mu,sigma)
ll[i] <- mean(x) - qnorm(0.975)*sqrt(sigma^2/n)
ul[i] <- mean(x) + qnorm(0.975)*sqrt(sigma^2/n)
}
ll
ul
table(ll <= 500)
table(ul >= 500)
hist(ll)
nreps <- 1000
pv <- rep(NA, nreps)
inout <- rep(NA, nreps)
for (i in 1:nreps)
{
print(i)
set.seed(i)
x <- rnorm(n, mu, sigma)
pv[i] <- t.test(x, mu= 500)$p.value
lower <- t.test(x, mu= 500)$conf.int[1]
upper <- t.test(x, mu=500)$conf.int[2]
inout[i] <- ifelse(500 >= lower & 500 <= upper,1,0)
}
mean(1 - inout)
head(inout)
inout
hist(pv)
chivenctor <- ceiling(runif(1000, min= 0, max=4))
chivector <- ceiling(runif(1000, min= 0, max=4))
table(chivector)
chisq.test(table(chivector))
x <- rbinom(1000,1,.5)
x
table(x)
mean(x)
plot(heads, type ="l")
weights
boot <- numeric(999)
x <- weights
for (i in 1:length(boot)) boot[i] <- mean(sample(x,replace = TRUE))
sample
sample(x)
x
?sample
LL <- quantile((boot, 0.025))
LL <- quantile(boot, 0.025)
UL <- quantile(boot, 0.975)
UL
mean(boot)
LL
UL
t.test(x)
hist(x)
boot <- numeric(999)
?numeric
x <- weights
for (i in 1:length(boot)) boot[i] <- median(sample(x, replace = TRUE))
mean(boot)
hist(boot)
cv <- function(x) sd(x)/mean(x)
cv
x <- weigths
x <- weights
jack <- numeric(length(x) -1)
pseudo <- numeric(length(x))
for (i in 1:length(x))
{}
for (i in 1:length(x))
{
for (j in 1:length(x))
{
if(j <i) jack[j] <- x[j]
else if(j> i)
jack[j-1] <- x[j]}
pseudo  <- length(x)*cv(x) - (length(x)-1)*cv(jack)
}
jack
mean(pseudo)
varset <- var(pseudo)/length(pseudo)
varset
var(pseudo)
pseudo
var.test(pseudo)
trcit <- qt(0.975, length(pseudo) -1)
length(pseudo)
jack <- numeric(length(x) -1)
> pseudo <- numeric(length(x))
> for (i in 1:length(x))
+ {}
> for (i in 1:length(x))
+ {
+ for (j in 1:length(x))
+ {
+ if(j <i) jack[j] <- x[j]
+ else if(j> i)
+ jack[j-1] <- x[j]}
+ pseudo[i]  <- length(x)*cv(x) - (length(x)-1)*cv(jack)
+ }
jack <- numeric(length(x) -1)
pseudo <- numeric(length(x))
for (i in 1:length(x))
{}
for (i in 1:length(x))
{
for (j in 1:length(x))
{
if(j <i) jack[j] <- x[j]
else if(j> i)
jack[j-1] <- x[j]}
pseudo[i]  <- length(x)*cv(x) - (length(x)-1)*cv(jack)
}
pseudo
var(pseudo)
varset <- var(pseudo)/length(pseudo)
varset
trcit <- qt(0.975, length(pseudo) -1)
trcit
?Qt
?qt
LL <- mean(pseudo) - trcit * sqrt(varset)
UL <- mean(pseudo) + trcit * sqrt(varset)
LL
UL
hist(pseudo)
hist(mean(pseudo))
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/PrePost2.rda")
attach(PrePost2)
Posttest
PrePost2
head(prepost2)
head(PrePost2)
load("C:/Users/gyurs/Google Drive/private2/secuirty/code/R archive/Beginning R Data/prepost.rda")
prepost
head(prepost)
t.test(Posttest ~ Class)
t.test(Posttest ~ Term2)
library(perm)
install.packages("perm")
library(perm)
require(perm)
var.test(Posttest ~ Term2)
permTS(Posttest ~ Term2)
install.packages("Rcmdr")
Commander()
require(Rcmdr)
Commander()
Commander()
require(car)
Davis
head(David)
head(Davis)
males <- subset(Davis, sex == "M")
head(males)
Commander()
plot(RegModel.1)
plot(RegModel.1)
clear
clc
cls
acamedy <- read.csv("C:\Users\gyurs\test_ed\r_archive\machinelearning\rdata\academy.csv", stringsAsFactprs = F, header = T)
acamedy <- read.csv("C:\Users\gyurs\test_ed\r_archive\machinelearning\rdata\academy.csv", stringsAsFactprs = F, header = T, fileEncoding="cp949")
acamedy <- read.csv("C:\Users\gyurs\test_ed\r_archive\machinelearning\rdata\academy.csv", stringsAsFactors = F, header = T, fileEncoding="cp949")
acamedy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding="cp949")
academy
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding="cp949")
academy
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding="cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
academy
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949", encoding = "UTF-8")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949", encoding = "UTF-8")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "CP949")
del acamedy
delete acamedy
erase acamedy
clear acamedy
View(acamedy)
View(acamedy)
View(acamedy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "CP949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
academy
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, encoding = "UTF-8")
academy
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, encoding = "CP949")
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\Users\gyurs\test_ed\r_archive\machinelearning\rdata\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
head(academy)
View(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
head(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
Sys.setenv()
Sys.setenv()getwd
getwd()
Sys.setlocale()
Sys.setlocale(“LC_CTYPE”, “ko_KR.UTF-8”)
Sys.setlocale('LC_CTYPE', 'ko_KR.UTF-8')
Sys.setlocale(“LC_MESSAGES”, “en_US.UTF-8”)
Sys.setlocale('LC_MESSAGES', 'en_US.UTF-8')
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
View(academy)
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
install.packages("extrafont")
library(extrafont)
font_import()
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv("C:\\Users\\gyurs\\test_ed\\r_archive\\machinelearning\\rdata\\academy.csv", stringsAsFactors = F, header = T)
View(academy)
View(academy)
kimchi
setwd("C:/Users/gyurs/lockdpwn/r_archive/machinelearning/rdata")
kimchi <- read.csv("kimchi.csv", header=T, stringsAsFactors=F)
head(kimchi)
kimchi <- read.csv("kimchi.csv", header=T, stringsAsFactors=F, encoding = "utf-8")
head(kimchi)
kimchi <- read.csv("kimchi.csv", header=T, stringsAsFactors=F, fileEncoding = "cp949" ,encoding = "utf-8")
head(kimchi)
kimchi <- read.csv("kimchi.csv", header=T, stringsAsFactors=F, encoding = "utf-8")
head(kimchi)
kimchi <- read.csv("kimchi.csv", header=T)
head(kimchi)
colnames(kimchi) <- c("YYWW","LAST_WK","BIG_CNT","BIG_SALE","DEPT_CNT","DEPT_SALE","SUPER_CNT","SUPER_SALE","CONV_CNT","CONV_SALE")
head(kimchi)
sale <- kimchi$BIG_SALE
plot(sale, type="l", xlab="week",ylab="sale price")
plot(sale, xlab="week",ylab="sale price")
plot(sale, type="l", xlab="week",ylab="sale price")
plot(sale, type="l", xlab="week",ylab="sale price", grid(TRUE))
plot(sale, type="l", xlab="week",ylab="sale price", grid)
plot(sale, type="l", xlab="week",ylab="sale price"), grid
plot(sale, type="l", xlab="week",ylab="sale price"), grid()
plot(sale, type="l", xlab="week",ylab="sale price")
grid(NA, 5)
grid(5,5)
grid(5,5, lwd=2)
kimchi
library(zoo)
install.packages("zoo")
install.packages("zoo")
dates <- as.Date(as.character(kimchi$LAST_WK) , format="%Y%m%d")
dates
BIG_sales <- kimchi$BIG_SALE
DEPT_sales <- kimchi$DEPT_SALE
SUPER_sales <- kimchi$SUPER_SALE
all_sales <- as.data.frame(cbind(BIG_sales, DEPT_sales, SUPER_sales))
yang_sales <- zoo(all_sales, dates)
library(zoo)
yang_sales <- zoo(all_sales, dates)
head(yang_sales)
plot(yang_sales, screens=1, xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
grid(5,5)
grid(10,10)
plot(yang_sales, screens=c(1,3), xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
plot(yang_sales, screens=c(1,2), xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
plot(yang_sales, screens=c(1,4), xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
plot(yang_sales, screens=c(2,4), xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
plot(yang_sales, screens=c(1,3), xlab="date", ylab="sales amount", col = c('red', 'green', 'blue'))
help(plot)
b_sales <- zoo(BIG_sales, dates)
head(b_sales)
kimchi2<- read.csv("kimchi2.csv")
kimchi2<- read.csv("kimchi2.csv", header=T)
head(kimchi2)
k_sales <- zoo(kimchi2$SALES, as.Date(as.character(kimchi2$LAST_WK), format="%Y%m%d"))
head(k_sales)
k_sales
merge_data <- merge(d_sales = window(b_sales, start = "2015-01-01", end= "2015-12-31"), k_sales, all = F)
head(merge_data)
help(window)
plot(merge_data)
ccf(k_sales, window(b_sales, start = "2015-01-01", end="2015-12-31"), main="k_salevsb_sale")
ccf(k_sales, window(b_sales, start = "2015-01-01", end="2015-12-31"), main="k_sale vs b_sale")
plot(diff(b_sales))
plot(diff(b_sales))
abline(mean(b_sales))
abline(a = mean(b_sales))
abline(a = mean(b_sales))
abline(h = mean(b_sales))
abline(h = mean(b_sales), lty=2)
abline(h = mean(b_sales), lty=2, col="red")
help(abline)
acf(b_sales)
Box.test(b_sales)
Box.test(b_sales, type="Ljung-Box")
help(par)
help(mfrow)
par(mfrow = c(2,2))
c(2,2)
par
par(mfrow = c(1,1))
library(forecast)
install.packages("forecast")
movie <- read.csv("movie.csv", header = T)
library(e1071)
head(movie)
movie
library(e1071)
movie <- read.csv("movie.csv", header = T, stringsAsFactors = F, encoding = "utf-8")
head(movie)
movie <- read.csv("movie.csv", header = T, stringsAsFactors = F, fileEncoding = "cp949" ,encoding = "utf-8")
`Encoding<-`(unknown)
`Encoding<-`("unknown")
view
view(movie)
View(movie)
Sys.getlocale()
Sys.setlocale("LC_ALL","ko_KR.UTF-8")
Sys.getlocale()
Sys.setlocale("LC_ALL","ko_KR.UTF8")
Sys.setlocale("LC_ALL","ko_KR.UTF-8")
sessionInfo()
locale -a
Sys.setlocale("LC_ALL","ko_KR.UTF-8")
movie
movie <- read.csv("movie.csv")
head(movie)
movie <- read.csv("movie.csv", stringsAsFactors = F, header = F)
movie <- read.csv("movie.csv", stringsAsFactors = F, header = T)
head(movie)
movie <- read.csv("movie.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949", encoding = "utf-8")
movie <- read.csv("movie.csv", stringsAsFactors = F, header = T, encoding = "cp949")
movie <- read.csv("movie.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949", encoding = "utf-8")
movie <- read.csv("movie.csv", stringsAsFactors = F, header = T, encoding = "cp949")
head(movie)
movie <- read.csv("movie.csv", stringsAsFactors = F, encoding = "cp949")
head(movie)
movie <- read.csv("movie.csv", stringsAsFactors = F, encoding = "UTF-8")
head(movie)
movie <- read.csv("movie.csv", stringsAsFactors = F, encoding = "CP949")
head(movie)
movie <- read.csv("movie.csv", )
movie <- read.csv("movie.csv")
movie <- read.csv("movie.csv", )
movie <- read.csv("movie.csv")
head(movie)
movie <- read.csv("movie.csv", encoding="utf-8")
head(movie)
movie <- read.csv("movie.csv", encoding="UTF-8")
head(movie)
movie <- read.csv("movie.csv",stringsAsFactors = F, header=T, fileEncoding = "CP949", encoding="UTF-8")
head(movie)
movie <- read.csv("movie.csv",stringsAsFactors = F, header=T, fileEncoding = "UTF-8", encoding="UTF-8")
head(movie)
movie <- read.csv("movie.csv",stringsAsFactors = F, header=T, fileEncoding = "UTF-8", encoding="UTF-8")
academy
head(academy)
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T)
head(academy)
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding = ="CP949")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949", encoding = "UTF-8")
head(academy)
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949", sep="," ,encoding = "UTF-8")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949", sep="\," ,encoding = "UTF-8")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949", sep=, ,encoding = "UTF-8")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="CP949", sep="," ,encoding = "UTF-8")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="UTF-16" ,encoding = "UTF-8")
academy <- read.csv("academy.csv", stringsAsFactors = F, header = T, fileEncoding ="UTF-8" ,encoding = "UTF-8")
`sys`
Sys.setlocale("LC_ALL","en_US.UTF-8")
academy
movie
movie <- read.csv("movie.csv", header=T)
head(movie)
movie <- read.csv("movie.csv", header=T, stringsAsFactors = F)
head(movie)
movie <- read.csv("movie.csv", header=T, stringsAsFactors = F, fileEncoding = "CP949")
movie <- read.csv("movie.csv", header=T, stringsAsFactors = F, fileEncoding = "CP949", encoding = "UTF-8")
head(movie)
Sys.getlocale()
Sys.setlocale("LC_all","ko_KR.UTF-8")
Sys.setlocale("LC_ALL","ko_KR.UTF-8")
Sys.getlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
Sys.getlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
Sys.getlocale()
Sys.getlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
Sys.getlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
Sys.setlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
Sys.setlocale("LC_ALL","Korean_Korea.949")
movie <- read.csv("movie.csv", header=T)
head(movie)
movie
head(movie)
Sys.getlocale()
academy <- read.csv("academy.csv", header= T)
head(academy)
Sys.setlocale()
Sys.get
Sys.getlocale()
Sys.setlocale("LC_ALL","Korean_Korea.949")
academy <- read.csv("academy.csv", header= T)
head(academy)
Sys.setenv(LANG ="ko_KR.UTF-8")
Sys.getlocale()
Sys.getenv()
rm(academy)
academy <- read.csv("academy.csv",header=T)
head(academy)
Sys.getenv()
Sys.getlocale()
