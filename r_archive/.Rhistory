academy <- read("/home/edward/Documents/machine_learning/acamedy.csv")
academy <- read.csv("/home/edward/Documents/machine_learning/acamedy.csv")
academy <- read.csv("/home/edward/Documents/machine_learning/acamedy.csv", stringsAsFactors = F, header = T)
academy <- read.csv("/home/edward/Documents/machine_learning/academy.csv", stringsAsFactors = F, header = T)
academy <- read.csv("/home/edward/Documents/machine_learning/academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy
academy <- academy[-1]
academy
head(academy)
dist_academy <- dist(academy, method = "euclidean")
dist_academy
two_coord <- cmdscale(dist_academy)
plot(two_coord, tpye = "n")
text(two_coord, as.character(1:52))
food = read.csv("/home/edward/Documents/machine_learning/food.csv", stringsAsFactors = F, header = T , fileEncoding = "cp949")
food
head(food)
tail(food)
food.mult <- t(as.matrix(food)) %*% as.matrix(food)
head(food.mult)
food <- food[-1]
food.mult <- t(as.matrix(food)) %*% as.matrix(food)
head(food.mult)
dist.food <- dist(food.mult)
head(dist.food)
dist.food
dist.food
two_coord2 <- cmdscale(dist.food)
plot(two_coord)
plot(two_coord2, type="n")
text(two_coord2, rownames(food.mult))
skin <- read.csv("~/rstudio/ml/skin.csv", header =T , fileEncoding = "cp949")
skin
View(skin)
skin <- skin[-1]
str(skin)
x <- c("red","blue","blue","red","red")
info_entropy <- function(x)
{}
info_entropy <- function(x)
{
factor_x <- factor(x)
entropy <- 0
for(str in levels(factor_x))
{
pro <- sum(x == str) / length(x)
entropy <- entropy - pro * log2(pro)
}
return (entropy)
}
info_entropy(x)
x
factor(x)
first_entropy <- info_entropy(skin[,"쿠폰반응여부"])
first_entropy
for(str in colnames(skin)[1:5])
{
factors <- levels(skin[[str]])
sum_entropy <- 0
for(str2 in factors)
{
test_x <- skin[skin[[str]] == str2,][6]
sum_entropy <- sum_entropy + info_entropy(test_x[,1])
}
cat(str, '---->', sum_entropy, '\n')
}
library(rpart)
tree1 <- rpart(쿠폰반응여부 ~ . , data = skin, control = rpart.control(minsplit = 2))
plot(tree1, compress = T, uniform = T, margin = 0.1)
text(tree1, use.n = T, col = "blue")
tree1
##---------------------------------------
## (Gaussian) Mixture Model Clustering
##---------------------------------------
# bivariate nomral probability density function
mu1 <- 0   # setting the expected value of x1
mu2 <- 0   # setting the expected value of x2
s11 <- 3   # setting the variance of x1
s12 <- 4  # setting the covariance between x1 and x2
s22 <- 3   # setting the variance of x2
rho12 <- s12/(sqrt(s11)*sqrt(22)) # setting the correlation coefficient between x1 and x2
rho12
x1 <- seq(-5, 5, length = 50) # generating the vector series x1
x2 <- seq(-5, 5, length = 50) # generating the vector series x2
# multivariate normal density function
gaussian_func <- function(x1, x2){
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho12^2)))
term2 <- -1/(2*(1-rho12^2))
term3 <- (x1 - mu1)^2/s11
term4 <- (x2 - mu2)^2/s22
term5 <- 2*rho12*((x1 - mu1)*(x2 - mu2))/(sqrt(s11)*sqrt(s22))
term1*exp(term2*(term3 + term4 - term5))
}
# calculating the density values
z_score <- outer(x1, x2, gaussian_func)
head(z_score)
##------------
# 3-D normal distribution density plot : persp() of {base} package
# with interactive plotting with Manipulate package in RStudio
install.packages("manipulate")
library(manipulate)
manipulate(persp(x1, x2, z_score,
theta = theta_x, # theta gives the azimuthal viewing direction
phi = phi_x, # phi gives the colatitude viewing direction
main = "Two dimensional Normal Distribution"),
theta_x = slider(10, 90, initial = 35),
phi_x = slider(10, 90, initial = 10))
# 2-D contour plot
contour(x1, x2, z_score, xlab = "x1", ylab = "x2",
main = "Bivariate(2 dimensional) Normal Distribution : contour plot")
x1 = c(1,2,3,3,2)
x2 = c(2,2,1,2,3)
cov(x1,x2)
xx = cbind(x1,x2)
xx
cov(xx)
cov(xx, method="pearson")
cov(xx, method="spearman")
cov(xx, y= 0.5)
cov(xx)
y1 <- c(0,1,1,0,1,1,0,0)
y2 <- c(0,0,1,1,0,1,1,0)
y3 <- c(1,1,1,1,0,0,0,0)
yy <- cbind(y1,y2,y3)
yy
cov(yy)
mean(yy)
mean(y1)
mean(y2)
mean(y3)
3/16.
3/16. * 1.25
ㅌㅌ
ㅌx
xx
cov(xx) * 25
cov(xx)
mean(xx)
mean(xx[,1])
mean(xx[,2])
(1-2.2)^2 + (2-2.2)^2 + (3-2.2)^2 + (3-2.2)^2 + (2-2.2)^2
2.8/5
x
x1
x1 * x1.t
t(x1)
x1 * t(x1)
2.2^2
1+4+9+9+4 - 4.84
/25
22.16/25
22.16/5
1+4+9+9+4
27/5
5.4-4.84
cov(xx)
inv(xx)
inverse.gaussian(xx)
xx
xx.inv()
solve(xx)
cov = cov(xx)
solve(cov)
cov
solve(cov) %*% cov
plot(x1,x2)
y1 <- c(7,8,9,9,8)
y2 <- c(9,9,8,9,10)
yy <- cbind(y1,y2)
yy
plot(x1,x2,y1,y2)
zz <- cbind(xx,yy)
zz
plot(zz)
plot(xx,yy)
plot(xx,yy,xlim = 10, ylim=10)
plot(xx~yy)
plot(x1 ~ x2 , y1 ~ y2)
plot(x1,x2)
par(y1,y2)
par(new=T)
points(y1,y2)
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
par(new=True)
par(new=TRUE)
range(0,10)
range(0,10)
rep(0,10)
rep(0,10,1)
rep(0,10,3)
seq(1,10)
seq(0.1,2)
seq(0.1,10)
seq(0.1,10,0.1)
seq(0.1,2,0.1)
z1 <- -0.826 * seq(0.1,2,0.1)
z2 <- -1.11 * seq(.1,2,.1)
z3 <- c(10.35)
z1
z2
z3
z3 <- rep(10.35,20)
z3
zz <- z1 + z2 + z3
zz
tt <- seq(.1,2,.1)
plot(tt,zz,xlim=range(0,10),ylim=range(0,10))
plot(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
par(new=TRUE)
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
z1 <- -0.826 * seq(0.1,20,0.1)
z2 <- -1.11 * seq(.1,20,.1)
z3 <- rep(10.35,200)
zz <- z1 + z2 + z3
tt <- seq(.1,20,.1)
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
v1 <- -16.52 * seq(0.1,2,0.1)
v2 <- -22.25 * seq(.1,20,.1)
v3 <- rep(208.35,200)
vv <- v1 + v2 + v3
points(tt,vv,type='l',xlim=range(0,10),ylim=range(0,10))
v1 <- -16.52 * seq(0.1,20,0.1)
vv <- v1 + v2 + v3
points(tt,vv,type='l',xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
points(tt,vv,type='l',col="green",xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,vv,type='l',col="blue",xlim=range(0,10),ylim=range(0,10))
ls
ls -al
ll
read.csv()
load("~/lockdpwn/r_archive/machineLearning/rdata/.RData")
load("~/lockdpwn/r_archive/.RData")
x1
x2
library(koNLP)
install.packages("koNLP")
Sys.getenv()
install.packages("koNLP")
version
flibraray
library(koNLP)
localeToCharset()
install.packages("rJava")
install.packages("koNLP")
install.packages("koNLP")
install.packages("rJava")
install.packages("koNLP")
install.packages("rJava")
install.packages("rJava")
install.packages("koNLP")
library(koNLP)
install.packages("KoNLP", repos="http://R-Forge.R-project.org")
install.packages("koNLP")
install.packages("KoNLP")
library(koNLP)
library(KoNLP)
install.packages("KoNLP")
install.packages("httr")
install.packages("curl")
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
install.packages("KoNLP")
library(KoNLP)
useSejongDic()
txt <- readLines('machineLearning/rdata/spam.csv')
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "CP949")
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
txt
place <- sapply(txt, extractNoun, USE.NAMES = F)
place
Sys.getlocale()
c <- unlist(place)
c
ls
txt
txt <- readLines('machineLearning/rdata/spam.csv')
txt
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
head(txt)
Sys.getlocale()
library(KoNLP)
useSejongDic()
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
head(txt)
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
head(txt)
academy
head(academy)
academy <- read.csv("/home/edward/Documents/machine_learning/academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy
head(academy)
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T)
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
head(academy)
academy2 <- readLines('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy2 <- readLines('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T)
academy2 <- readLines('./machineLearning/rdata/academy.csv')
head(academy2)
head(academy)
academy2 <- readLines('./machineLearning/rdata/academy.csv',encoding = "cp949")
head(academy2)
academy2 <- iconv(academy2, from="cp949",to="utf-8")
head(academy2)
place <- sapply(txt, extractNoun, USE.NAMES = F)
library(KoNLP)
useSejongDic()
library(KoNLP)
useSejongDic()
sudo useSejongDic()
library(KoNLP)
useSejongDic()
library(KoNLP)
useSejongDic()
place
txt
txt <- iconv(txt, from="cp949", to="utf-8")
place <- sapply(txt, extractNoun, USE.NAMES = F)
head(place)
c<-unlist(place)
c
place <- Filter(function(x) {nchar(x) >= 2} , c)
head(place)
res <- str_replace_all(place, "[^[:alpha:]]", "")
library(stringr)
res <- str_replace_all(place, "[^[:alpha:]]", "")
res
res <- res[res != ""]
res
txt <- readLines('test.txt')
head(txt)
place <- sapply(txt, extractNoun, USE.NAMES = F)
head(place)
useSejongDic()
c<-unlist(place)
place <- Filter(function(x) {nchar(x) >= 2} , c)
head(place)
res <- str_replace_all(place, "[^[:alpha:]]", "")
head(res)
res <- res[res != ""]
res
wordcount <- table(res)
wordcount
wordcount2 <- sort(table(res), decreasing = T)
head(wordcount2)
wordcount2
library(wordcloud)
install.packages("wordcloud")
install.packages("RColorBrewer")
library(wordcloud)
palete <- brewer.pal(8, "Set2")
palate
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
library()
library(RColorBrewer)
palete <- brewer.pal(8, "Set2")
palate
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
str(palete)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palatte)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, color=palate)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red,blue,green,orange")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red,blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="[red,blue]")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red","blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red""blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors='"red","blue"')
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=""red","blue"")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="'red'")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="c(red,blue)")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue"))
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue","green","oragne"))
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue","green","orange"))
palete
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palete)
txt2 <- readLines('test2.txt')
head(txt2)
place2 <- sapply(txt2, extractNoun, USE.NAMES = F)
useSejongDic()
c2 <- unlist(place2)
place2 <- Filter(function(x) {nchar(x) >= 2} , c2)
res2 <- str_replace_all(place2, "[^[:alpha:]]", "")
res2 <- res2[res2 != ""]
res2
wordcount22 <- table(res2)
wordcount23 <- sort(table(res2), decreasing = T)
wordcloud(names(wordcount22), freq = wordcount22, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palete)
head(wordcount23)
wordcount[-1]
wordcount22[0]
wordcount22[1]
wordcount22[2]
wordcount22[3]
wordcount22[-1]
